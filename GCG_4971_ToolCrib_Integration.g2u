Program.Sub.ScreenSU.Start
Gui.Form..Create
Gui.Form..Size(8400,2535)
Gui.Form..MinX(0)
Gui.Form..MinY(0)
Gui.Form..Position(0,0)
Gui.Form..BackColor(-2147483633)
Gui.Form..MousePointer(0)
Gui.Form..Event(UnLoad,Form_UnLoad)
Gui.Form..MaxButton(False)
Gui.Form..Sizeable(False)
Gui.Form..Caption("MSC Vending Machine Integration Maintenance")
Gui.Form.lblFile.Create(Label,"Vending Machine File Directory",True,2370,255,0,135,180,True,0,"Arial",8,-2147483633,0)
Gui.Form.txtFile.Create(TextBox,"",True,8010,300,0,150,390,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtFile.TabStop(True)
Gui.Form.txtFile.TabIndex(1)
Gui.Form.txtFile.Event(LostFocus,txtFile_LostFocus)
Gui.Form.lblLog.Create(Label,"Days to Keep Log Files",True,1845,255,0,135,885,True,0,"Arial",8,-2147483633,0)
Gui.Form.txtLog.Create(TextBox,"",True,690,300,0,150,1095,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtLog.TabStop(True)
Gui.Form.txtLog.TabIndex(7)
Gui.Form.txtLog.NumericOnly(2)
Gui.Form.cmdSave.Create(Button)
Gui.Form.cmdSave.Size(1155,435)
Gui.Form.cmdSave.Position(150,1680)
Gui.Form.cmdSave.Caption("Save")
Gui.Form.cmdSave.Event(Click,cmdSave_Click)
Gui.Form.cmdSave.TabStop(True)
Gui.Form.cmdSave.TabIndex(5)
Gui.Form.cmdReset.Create(Button)
Gui.Form.cmdReset.Size(1155,435)
Gui.Form.cmdReset.Position(1470,1680)
Gui.Form.cmdReset.TabStop(True)
Gui.Form.cmdReset.TabIndex(6)
Gui.Form.cmdReset.Caption("Reset")
Gui.Form.cmdReset.Event(Click,cmdReset_Click)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
Program.Sub.Preflight.End

Program.Sub.Main.Start
'\-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------/
'\Author: Bix																														/
'\Date: 7/11/2018																													/
'\Customer: Auger Fabrication, Inc.																									/
'\Project: Tool Crib Integration																										/
'\GCG_4971_ToolCrib_Integration.g2u																									/
'\Program will include a maintenance program for fine tuning the integration and the actual integration GAB service attached to Online Update	/
'\-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------/
V.Local.sError.Declare(String)
F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.Caller.Hook,=,38130)
	'Integration Program running on Online Update
	F.Intrinsic.Control.CallSub(OpenConnection,"sOtherSubroutine",V.Ambient.CurrentSubroutine)
	'FILE_DIR(String), LOG_LENGTH(Long)
	F.Data.DataTable.CreateFromSQL("dtMaint","con","select * from GCG_4971_MSC_MAINT;",True)
	F.Intrinsic.Control.CallSub(CloseConnection,"sOtherSubroutine",V.Ambient.CurrentSubroutine)
	
	F.Intrinsic.Control.CallSub(IntegrateMSCFileStandalone)
	F.Intrinsic.Control.CallSub(ScrubFiles)
	F.Data.DataTable.Close("dtMaint")
F.Intrinsic.Control.Else
	'Maintenance Program
	F.Intrinsic.Control.CallSub(OpenMaintenanceScreen)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.OpenConnection.Start
V.Local.sError.Declare(String)
F.Intrinsic.Control.Try
F.ODBC.Connection!con.OpenCompanyConnection
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {3}->{2}{1}Error Occurred {4} with description {5}{1}{1}GAB Version: {6}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Args.sOtherSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.OpenConnection.End

Program.Sub.CloseConnection.Start
V.Local.sError.Declare(String)
F.Intrinsic.Control.Try
F.ODBC.Connection!con.Close
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {3}->{2}{1}Error Occurred {4} with description {5}{1}{1}GAB Version: {6}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Args.sOtherSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.CloseConnection.End

Program.Sub.OpenMaintenanceScreen.Start
'Populates screen with data from DB
V.Local..BulkDeclareString(sError,sFileDir)
V.Local.bDirCheck.Declare(Boolean)
F.Intrinsic.Control.Try

F.Intrinsic.Control.CallSub(OpenConnection,"sOtherSubroutine",V.Ambient.CurrentSubroutine)
'FILE_DIR(String), LOG_LENGTH(Long)
F.Data.DataTable.CreateFromSQL("dtMaint","con","select * from GCG_4971_MSC_MAINT;",True)
F.Intrinsic.Control.CallSub(CloseConnection,"sOtherSubroutine",V.Ambient.CurrentSubroutine)

'First time setup - create default entry and add directories for it if they don't exist
F.Intrinsic.Control.If(V.DataTable.dtMaint.RowCount,=,0)
	F.Intrinsic.String.Build("{0}\CUSTOM\",V.Caller.GlobalDir,V.Local.sFileDir)
	F.Intrinsic.File.DirExists(V.Local.sFileDir,V.Local.bDirCheck)
	F.Intrinsic.Control.If(V.Local.bDirCheck,=,False)
		F.Intrinsic.File.CreateDir(V.Local.sFileDir)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.String.Build("{0}\CUSTOM\4971\",V.Caller.GlobalDir,V.Local.sFileDir)
	F.Data.DataTable.AddRow("dtMaint","FILE_DIR",V.Local.sFileDir,"LOG_LENGTH",30,"ID",1)
	F.Intrinsic.Control.CallSub(OpenConnection,"sOtherSubroutine",V.Ambient.CurrentSubroutine)
	F.Data.DataTable.SaveToDB("dtMaint","con","GCG_4971_MSC_MAINT","ID",256)
	F.Intrinsic.Control.CallSub(CloseConnection,"sOtherSubroutine",V.Ambient.CurrentSubroutine)
	F.Intrinsic.File.DirExists(V.Local.sFileDir,V.Local.bDirCheck)
	F.Intrinsic.Control.If(V.Local.bDirCheck,=,False)
		F.Intrinsic.File.CreateDir(V.Local.sFileDir)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.String.Build("{0}\Vending\",V.Caller.FilesDir,V.Local.sFileDir)
	F.Intrinsic.File.DirExists(V.Local.sFileDir,V.Local.bDirCheck)
	F.Intrinsic.Control.If(V.Local.bDirCheck,=,False)
		F.Intrinsic.File.CreateDir(V.Local.sFileDir)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.String.Build("{0}\Vending\Exceptions\",V.Caller.FilesDir,V.Local.sFileDir)
	F.Intrinsic.File.DirExists(V.Local.sFileDir,V.Local.bDirCheck)
	F.Intrinsic.Control.If(V.Local.bDirCheck,=,False)
		F.Intrinsic.File.CreateDir(V.Local.sFileDir)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.String.Build("{0}\Vending\Processed\",V.Caller.FilesDir,V.Local.sFileDir)
	F.Intrinsic.File.DirExists(V.Local.sFileDir,V.Local.bDirCheck)
	F.Intrinsic.Control.If(V.Local.bDirCheck,=,False)
		F.Intrinsic.File.CreateDir(V.Local.sFileDir)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(PopulateMaintScreen)

'\-----------------------------------------------------------------------------------------/
'\If more options outside any disabled ones are included, the		/
'\	custom table will need updating								/
'\-----------------------------------------------------------------------------------------/

Gui.Form..Show

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.OpenMaintenanceScreen.End

Program.Sub.Form_UnLoad.Start
'Closes DT and ends program
V.Local.sError.Declare(String)
F.Intrinsic.Control.Try

F.Data.DataTable.Close("dtMaint")
F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.Form_UnLoad.End

Program.Sub.cmdSave_Click.Start
'Updates DT with fields on screen and then saves to DB
V.Local.sError.Declare(String)
F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.Screen.Form!txtFile.Text.Trim,!=,V.DataTable.dtMaint(0).FILE_DIR!FieldValTrim,"or",V.Screen.Form!txtLog.Text.Long,!=,V.DataTable.dtMaint(0).LOG_LENGTH!FieldVal)
	F.Data.DataTable.SetValue("dtMaint",0,"FILE_DIR",V.Screen.Form!txtFile.Text.Trim,"LOG_LENGTH",V.Screen.Form!txtLog.Text.Long)

	F.Intrinsic.Control.CallSub(OpenConnection,"sOtherSubroutine",V.Ambient.CurrentSubroutine)
	F.Data.DataTable.SaveToDB("dtMaint","con","GCG_4971_MSC_MAINT","ID",256)
	F.Intrinsic.Control.CallSub(CloseConnection,"sOtherSubroutine",V.Ambient.CurrentSubroutine)
	F.Data.DataTable.AcceptChanges("dtMaint")

	F.Intrinsic.UI.Msgbox("Saved!")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.cmdSave_Click.End

Program.Sub.cmdReset_Click.Start
'Repopulates fields from DT
V.Local.sError.Declare(String)
F.Intrinsic.Control.Try

F.Intrinsic.Control.CallSub(PopulateMaintScreen)

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.cmdReset_Click.End

Program.Sub.txtFile_LostFocus.Start
'Checks to see if Directory path is FQP with a "\" at the end
V.Local..BulkDeclareString(sError,sFileDir,sLastChar)
F.Intrinsic.Control.Try

V.Local.sFileDir.Set(V.Screen.Form!txtFile.Text.Trim)
F.Intrinsic.String.Right(V.Local.sFileDir,1,V.Local.sLastChar)
F.Intrinsic.Control.If(V.Local.sLastChar,!=,"\")
	F.Intrinsic.String.Build("{0}\",V.Local.sFileDir,V.Local.sFileDir)
	Gui.Form.txtFile.Text(V.Local.sFileDir)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.txtFile_LostFocus.End

Program.Sub.PopulateMaintScreen.Start
'Populates Maintenance Screen with values from DT
V.Local.sError.Declare(String)
F.Intrinsic.Control.Try

Gui.Form.txtFile.Text(V.DataTable.dtMaint(0).FILE_DIR!FieldValTrim)
Gui.Form.txtLog.Text(V.DataTable.dtMaint(0).LOG_LENGTH!FieldVal)

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.PopulateMaintScreen.End

Program.Sub.IntegrateMSCFileStandalone.Start
'Reads in file exported by vending machine
V.Local..BulkDeclareString(sError,sFileDir,sFileList,sFilePath,sFile,sFileType,sFileExceptions,sExcept,sSQL,sRet,sPart,sQty,sLine,sCost,sFileString,sFileMoved,sFileMovedPath,sQtyOnHand,sIssueRec,sRef)
V.Local..BulkDeclareBoolean(bInvalidJob,bFileExists,bZeroQtyIssue,bIncorrectFormat,bMatMiscSeq,bZeroCostIssue,bCharComp,bInsufficientInventory,bPartNotFound)
V.Local..BulkDeclareLong(iCnt,iLine)
V.Local.fQty.Declare(Float)
F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.DataTable.dtMaint.RowCount,=,0)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

V.Local.sFileDir.Set(V.DataTable.dtMaint(0).FILE_DIR!FieldValTrim)

'Paths for moving files that fail or are uploaded
F.Intrinsic.String.Build("{0}\Vending\",V.Caller.FilesDir,V.Local.sFileMoved)
F.Intrinsic.String.Build("{0}\Vending\Exceptions\",V.Caller.FilesDir,V.Local.sFileExceptions)

F.Intrinsic.File.GetFileList(V.Local.sFileDir,V.Local.sFileList)
'Check for files in the directory
F.Intrinsic.Control.If(V.Local.sFileList,!=,"")
	'File names separated by a semi colon
	F.Intrinsic.String.Split(V.Local.sFileList,":",V.Local.sFileList)
	'Loop through files list
	F.Intrinsic.Control.For(V.Local.iCnt,0,V.Local.sFileList.UBound,1)
		F.Intrinsic.String.Right(V.Local.sFileList(V.Local.iCnt),4,V.Local.sFileType)
		'Check if file is csv type
		F.Intrinsic.Control.If(V.Local.sFileType,=,".csv")
			'Combine directory and file name in list to get file path
			F.Intrinsic.String.Build("{0}{1}",V.Local.sFileDir,V.Local.sFileList(V.Local.iCnt),V.Local.sFilePath)
			F.Intrinsic.String.Build("{0}Processed\{1}",V.Local.sFileMoved,V.Local.sFileList(V.Local.iCnt),V.Local.sFileMovedPath)
			F.Intrinsic.File.File2String(V.Local.sFilePath,V.Local.sFile)
			F.Intrinsic.String.Split(V.Local.sFile,V.Ambient.NewLine,V.Local.sFile)
			'Loop through lines in the file, start at 1 to skip the column headers in the file
			F.Intrinsic.Control.For(V.Local.iLine,1,V.Local.sFile.UBound,1)
				F.Intrinsic.Control.If(V.Local.sFile(V.Local.iLine).Length,=,0)
					F.Intrinsic.Control.Next(V.Local.iLine)
				F.Intrinsic.Control.EndIf
				V.Local.bZeroQtyIssue.Set(False)
				V.Local.bPartNotFound.Set(False)
				V.Local.bInsufficientInventory.Set(False)
				V.Local.sIssueRec.Set("")
				V.Local.sRef.Set("")
				'\-----------------------------------------/
				'\	File Makeup:				/
				'\	0	- Part No 			/
				'\	1	- Part Description		/
				'\	2	- Date				/
				'\	3	- Date - Time			/
				'\	4	- User ID			/
				'\	5	- Job/Suffix/Seq		/
				'\	6	- Ext Field 5	unused	/
				'\	7	- Ext Field 4	unused	/
				'\	8	- Issue Quantity		/
				'\	9	- Unit Cost			/
				'\----------------------------------------/
				F.Intrinsic.String.Split(V.Local.sFile(V.Local.iLine),",",V.Local.sLine)
				F.Intrinsic.String.RPad(V.Local.sLine(0)," ",20,V.Local.sPart)
				'Skip 1, 2, 3, 4, 5, 6 & 7
				V.Local.sQty.Set(V.Local.sLine(8))
				'V.Local.sCost.Set(V.Local.sLine(9))
				V.Local.sCost.Set("0")
				V.Local.sLine.Redim(0,0)
				
				F.Intrinsic.Control.CallSub(OpenConnection,"sOtherSubroutine",V.Ambient.CurrentSubroutine)
				'Validate Part No
				F.Intrinsic.String.Build("Select Part From V_Inventory_Mstr Where Part = '{0}' And Location = '';",V.Local.sPart.Trim,V.Local.sSQL)
				F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)
				V.Local.bPartNotFound.Set(V.Ambient.ExecuteAndReturnEOF)
				'Validate On Hand Qty
				F.Intrinsic.Control.If(V.Local.sQty,=,"","or",V.Local.sQty.Float,=,0)
					V.Local.sQty.Set("0")
					V.Local.bZeroQtyIssue.Set(True)
				F.Intrinsic.Control.ElseIf(V.Local.sQty.Float,>,0)
					F.Intrinsic.String.Build("Select Qty_OnHand From V_Inventory_Mstr Where Part = '{0}' And Location = '';",V.Local.sPart.Trim,V.Local.sSQL)
					F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sQtyOnHand)
					F.Intrinsic.Control.If(V.Local.sQty.Float,>,V.Local.sQtyOnHand.Float)
						V.Local.bInsufficientInventory.Set(True)
					F.Intrinsic.Control.Else
						V.Local.sIssueRec.Set("I")
						V.Local.sRef.Set("TOOL IN USE")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.ElseIf(V.Local.sQty.Float,<,0)
					F.Intrinsic.Math.Mult(V.Local.sQty.Float,-1,V.Local.fQty)
					V.Local.sQty.Set(V.Local.fQty.String)
					V.Local.sIssueRec.Set("R")
					V.Local.sRef.Set("TOOL RETURNED")
				F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.CallSub(CloseConnection,"sOtherSubroutine",V.Ambient.CurrentSubroutine)
				
				F.Intrinsic.Control.If(V.Local.bZeroQtyIssue,=,True,"or",V.Local.bPartNotFound,=,True,V.Local.bInsufficientInventory,=,True)
					'If you made it here, something is wrong with the part/qty in the export file
					F.Intrinsic.Control.If(V.Local.sExcept.Length,!=,0)
						'Add a new line if this isn't the first line
						F.Intrinsic.String.Build("{0}{1}",V.Local.sExcept,V.Ambient.NewLine,V.Local.sExcept)
					F.Intrinsic.Control.EndIf
					F.Intrinsic.String.Build("{0}Part:{1},Qty:{2},Inv",V.Local.sExcept,V.Local.sPart.Trim,V.Local.sQty,V.Local.sExcept)
					'Issue zero qty
					F.Intrinsic.Control.If(V.Local.bZeroQtyIssue)
						F.Intrinsic.String.Build("{0} || Zero-Qty",V.Local.sExcept,V.Local.sExcept)
					F.Intrinsic.Control.EndIf
					'Part Not Found
					F.Intrinsic.Control.If(V.Local.bPartNotFound)
						F.Intrinsic.String.Build("{0} || Part-Not-Found",V.Local.sExcept,V.Local.sExcept)
					F.Intrinsic.Control.EndIf
					'Insufficient Inventory
					F.Intrinsic.Control.If(V.Local.bInsufficientInventory)
						F.Intrinsic.String.Build("{0} || Insufficient-Inventory-On-Hand",V.Local.sExcept,V.Local.sExcept)
					F.Intrinsic.Control.EndIf
					F.Intrinsic.String.Build("{0} || File: {1}",V.Local.sExcept,V.Local.sFileMovedPath,V.Local.sExcept)
				F.Intrinsic.Control.Else
					'If the file string is not empty, append to it on a new line
					F.Intrinsic.Control.If(V.Local.sFileString.Length,!=,0)
						F.Intrinsic.String.Build("{0}{1}",V.Local.sFileString,V.Ambient.NewLine,V.Local.sFileString)
					F.Intrinsic.Control.EndIf
					F.Intrinsic.String.Build("{0}{1},,,{2},{3},,,,,{4},,{5},Y,,,,",V.Local.sFileString,V.Local.sPart.Trim,V.Local.sQty.Float,V.Local.sRef.Trim,V.Local.sIssueRec.Trim,V.Local.sCost,V.Local.sFileString)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Next(V.Local.iLine)
			'Move file to Processed Vending File location
			F.Intrinsic.File.CopyFile(V.Local.sFilePath,V.Local.sFileMovedPath)
			F.Intrinsic.File.DeleteFile(V.Local.sFilePath)
			V.Local.sFile.Redim(0,0)
			'Add an entry to the exceptions file for logging location of export file so that it can be deleted at a later date
			F.Intrinsic.Control.If(V.Local.sExcept.Length,!=,0)
				'Add a new line if this isn't the first line
				F.Intrinsic.String.Build("{0}{1}",V.Local.sExcept,V.Ambient.NewLine,V.Local.sExcept)
			F.Intrinsic.Control.EndIf
			F.Intrinsic.String.Build("{0}Placeholder-for-export-file || File: {1}",V.Local.sExcept,V.Local.sFileMovedPath,V.Local.sExcept)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iCnt)
	
	F.Intrinsic.Control.If(V.Local.sFileString.Length,!=,0)
		'Comma separated file struct: PART, REV, LOC, QTY, REF, LOT, BIN, HEAT, SERIAL, ISS-REC(I for Issue, R for Rec), GL-ACCT, COST, ALLOW-ZERO-COST-FLAG, WIDTH, LENGTH, UM-WIDTH, UM-LENGTH
		V.Local.sFile.Set("ISSREC.txt")
		F.Intrinsic.String.Build("{0}\{1}",V.Caller.FilesDir,V.Local.sFile,V.Local.sFilePath)
		F.Intrinsic.File.String2File(V.Local.sFilePath,V.Local.sFileString)
		'Run the standalone receipts/issues callwrapper
		F.Global.Callwrapper.New("IssueReceipt","Inventory.StandAloneIssueReceipts")
		F.Global.Callwrapper.SetProperty("IssueReceipt","FileName",V.Local.sFile)
		F.Global.Callwrapper.Run("IssueReceipt")
		F.Intrinsic.File.DeleteFile(V.Local.sFilePath)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(V.Local.sExcept.Length,!=,0)
		'If there is information in the exceptions string, save the exceptions file to the exceptions directory
		F.Intrinsic.String.Build("{0}_{1}_EXCEPTIONS.txt",V.Ambient.Date.FormatMMDDYYYY,V.Ambient.Time.FormatHHNNSS,V.Local.sFile)
		F.Intrinsic.String.Build("{0}{1}",V.Local.sFileExceptions,V.Local.sFile,V.Local.sFilePath)
		F.Intrinsic.File.String2File(V.Local.sFilePath,V.Local.sExcept)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.IntegrateMSCFileStandalone.End

Program.Sub.ScrubFiles.Start
V.Local..BulkDeclareString(sError,sFileMoved,sFileExceptions,sSQL,sFileList,sFilePath,sFileFailedPath,sLine)
V.Local..BulkDeclareDate(dLogCutoff,dDate)
V.Local..BulkDeclareLong(iCnt,iLine,iDateDiff)
V.Local.bFileExists.Declare(Boolean)
V.Local.sFile.Declare(String)
F.Intrinsic.Control.Try

'Paths for moving files and exceptions
F.Intrinsic.String.Build("{0}\Vending\Processed\",V.Caller.FilesDir,V.Local.sFileMoved)
F.Intrinsic.String.Build("{0}\Vending\Exceptions\",V.Caller.FilesDir,V.Local.sFileExceptions)

'Using mask 127, the DateSubtractWorkdays function will include Saturdays and Sundays (1:Sunday,2:Monday,4:Tuesday,8:Wednesday,16:Thursday,32:Friday,64:Saturday)
F.Intrinsic.Date.DateSubtractWorkdays(V.Ambient.Now,V.DataTable.dtMaint(0).LOG_LENGTH!FieldVal,127,V.Local.dLogCutoff)

'Scrub through exception logs looking for ones that have a date before log cutoff
F.Intrinsic.File.GetFileList(V.Local.sFileExceptions,V.Local.sFileList)
F.Intrinsic.Control.If(V.Local.sFileList,!=,"")
	F.Intrinsic.String.Split(V.Local.sFileList,":",V.Local.sFileList)
	F.Intrinsic.Control.For(V.Local.iCnt,0,V.Local.sFileList.UBound,1)
		F.Intrinsic.String.Split(V.Local.sFileList(V.Local.iCnt),"_",V.Local.sFile)
		'position 0 is the date in MMDDYYYY form
		F.Intrinsic.Date.ConvertDString(V.Local.sFile(0),"MMDDYYYY",V.Local.dDate)
		V.Local.sFile.Redim(0,0)
		
		'Check to see if Date on file is before or after cutoff date
		F.Intrinsic.Date.DateDiff("D",V.Local.dLogCutoff,V.Local.dDate,V.Local.iDateDiff)
		F.Intrinsic.Control.If(V.Local.iDateDiff,<,0)
			'If here, then log date expiration has passed
			F.Intrinsic.String.Build("{0}{1}",V.Local.sFileExceptions,V.Local.sFileList(V.Local.iCnt),V.Local.sFilePath)
			F.Intrinsic.File.File2String(V.Local.sFilePath,V.Local.sFile)
			'Split on newline to loop through the lines
			F.Intrinsic.String.Split(V.Local.sFile,V.Ambient.NewLine,V.Local.sFile)
			F.Intrinsic.Control.For(V.Local.iLine,0,V.Local.sFile.UBound,1)
				'Splitting on this string because it is just before the path to the failed export file
				F.Intrinsic.String.Split(V.Local.sFile(V.Local.iLine),"File: ",V.Local.sLine)
				V.Local.sFileFailedPath.Set(V.Local.sLine(1))
				'Delete failed export file if it exists
				F.Intrinsic.File.PathExists(V.Local.sFileFailedPath,V.Local.bFileExists)
				F.Intrinsic.Control.If(V.Local.bFileExists)
					F.Intrinsic.File.DeleteFile(V.Local.sFileFailedPath)
				F.Intrinsic.Control.EndIf
				V.Local.sLine.Redim(0,0)
			F.Intrinsic.Control.Next(V.Local.iLine)
			V.Local.sFile.Redim(0,0)
			
			'Delete log file
			F.Intrinsic.File.DeleteFile(V.Local.sFilePath)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iCnt)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.ScrubFiles.End
